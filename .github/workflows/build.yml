name: frontera

on:
  push:
    branches: ['main', 'dev']
  pull_request:
  release:
    types: [created, edited]

env:
  REGISTRY: ghcr.io
  FRONTERA_DEV_IMAGE_NAME: ${{ github.repository }}/dev
  FRONTERA_PROD_IMAGE_NAME: ${{ github.repository }}/prod
  MIDDLEWARE_IMAGE_NAME: ${{ github.repository }}/middleware
  DOCKER_BUILDKIT: 1

permissions:
  contents: read
  packages: write

jobs:
  build-frontera-dev:
    runs-on: ubicloud-standard-2
    steps:
      - name: Delete huge unnecessary tools folder
        run: rm -rf /opt/hostedtoolcache

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host

      - uses: ubicloud/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './package-lock.json'

      - name: Log in to the Container registry
        uses: docker/login-action@v3.3.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.REPOSITORY_READ_WRITE_USERNAME }}
          password: ${{ secrets.REPOSITORY_READ_WRITE_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5.6.1
        with:
          images: ${{ env.REGISTRY }}/${{ env.FRONTERA_DEV_IMAGE_NAME }}

      - name: Push Docker image
        uses: docker/build-push-action@v6.13.0
        with:
          push: ${{ github.ref_name == 'main' || github.event_name == 'release' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=gha,scope=frontera-build
            type=gha,scope=frontera-build-${{ github.job }}
          cache-to: |
            type=gha,mode=max,scope=frontera-build-${{ github.job }}
          build-args: |
            "VITE_MIDDLEWARE_API_URL=${{ secrets.DEV_VITE_MIDDLEWARE_API_URL }}"
            "VITE_CLIENT_APP_URL=${{ secrets.DEV_VITE_CLIENT_APP_URL }}"
            "VITE_REALTIME_WS_PATH=${{ secrets.DEV_VITE_REALTIME_WS_PATH }}"
            "VITE_REALTIME_WS_API_KEY=${{ secrets.DEV_VITE_REALTIME_WS_API_KEY }}"
            "VITE_NOTIFICATION_TEST_APP_IDENTIFIER=${{ secrets.NEXT_PUBLIC_NOTIFICATION_TEST_APP_IDENTIFIER }}"
            "VITE_NOTIFICATION_PROD_APP_IDENTIFIER=${{ secrets.NEXT_PUBLIC_NOTIFICATION_PROD_APP_IDENTIFIER }}"
            "VITE_NOTIFICATION_URL=${{ secrets.NEXT_PUBLIC_NOTIFICATION_URL }}"
            "VITE_STRIPE_PUBLIC_KEY=${{ secrets.DEV_VITE_STRIPE_PUBLIC_KEY }}"

  build-frontera-prod:
    runs-on: ubicloud-standard-2
    steps:
      - name: Delete huge unnecessary tools folder
        run: rm -rf /opt/hostedtoolcache

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host

      - uses: ubicloud/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './package-lock.json'

      - name: Log in to the Container registry
        uses: docker/login-action@v3.3.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.REPOSITORY_READ_WRITE_USERNAME }}
          password: ${{ secrets.REPOSITORY_READ_WRITE_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5.6.1
        with:
          images: ${{ env.REGISTRY }}/${{ env.FRONTERA_PROD_IMAGE_NAME }}

      - name: Push Docker image
        uses: docker/build-push-action@v6.13.0
        with:
          push: ${{ github.ref_name == 'main' || github.event_name == 'release' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=gha,scope=frontera-build
            type=gha,scope=frontera-build-${{ github.job }}
          cache-to: |
            type=gha,mode=max,scope=frontera-build-${{ github.job }}
          build-args: |
            "VITE_MIDDLEWARE_API_URL=${{ secrets.PROD_VITE_MIDDLEWARE_API_URL }}"
            "VITE_CLIENT_APP_URL=${{ secrets.PROD_VITE_CLIENT_APP_URL }}"
            "VITE_REALTIME_WS_PATH=${{ secrets.PROD_VITE_REALTIME_WS_PATH }}"
            "VITE_REALTIME_WS_API_KEY=${{ secrets.PROD_VITE_REALTIME_WS_API_KEY }}"
            "VITE_NOTIFICATION_TEST_APP_IDENTIFIER=${{ secrets.NEXT_PUBLIC_NOTIFICATION_TEST_APP_IDENTIFIER }}"
            "VITE_NOTIFICATION_PROD_APP_IDENTIFIER=${{ secrets.NEXT_PUBLIC_NOTIFICATION_PROD_APP_IDENTIFIER }}"
            "VITE_NOTIFICATION_URL=${{ secrets.NEXT_PUBLIC_NOTIFICATION_URL }}"
            "VITE_STRIPE_PUBLIC_KEY=${{ secrets.PROD_VITE_STRIPE_PUBLIC_KEY }}"

  build-middleware:
    runs-on: ubicloud-standard-2
    steps:
      - name: Delete huge unnecessary tools folder
        run: rm -rf /opt/hostedtoolcache

      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host

      - uses: ubicloud/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './middleware/package-lock.json'

      - name: Log in to the Container registry
        uses: docker/login-action@v3.3.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.REPOSITORY_READ_WRITE_USERNAME }}
          password: ${{ secrets.REPOSITORY_READ_WRITE_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5.6.1
        with:
          images: ${{ env.REGISTRY }}/${{ env.MIDDLEWARE_IMAGE_NAME }}

      - name: Push Docker image
        uses: docker/build-push-action@v6.13.0
        with:
          context: middleware/
          push: ${{ github.ref_name == 'main' || github.event_name == 'release' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=gha,scope=frontera-build
            type=gha,scope=frontera-build-${{ github.job }}
          cache-to: |
            type=gha,mode=max,scope=frontera-build-${{ github.job }}
