import { observer } from 'mobx-react-lite';

import { useStore } from '@shared/hooks/useStore';
import { Tooltip } from '@ui/overlay/Tooltip/Tooltip';

interface UserHexagonProps {
  id: string;
  name: string;
  color: string;
  isCurrent?: boolean;
}

export const UserHexagon = observer(
  ({ name, isCurrent, color, id }: UserHexagonProps) => {
    const { users } = useStore();
    const url = users.value.get(id)?.value?.profilePhotoUrl;

    if (url) {
      return <ClippedImage url={url} name={name} color={color} />;
    }

    return (
      <Tooltip hasArrow label={name}>
        <div className='flex w-[26px] h-[28px] items-center justify-center cursor-default'>
          <svg
            width='26'
            height='28'
            fill='none'
            color={color}
            viewBox='0 0 26 28'
            xmlns='http://www.w3.org/2000/svg'
            style={{
              position: 'absolute',
            }}
          >
            <path
              stroke='currentColor'
              fill={isCurrent ? 'currentColor' : '#FCFCFD'}
              d='M11.25 1.58771C12.3329 0.962498 13.6671 0.962498 14.75 1.58771L22.8744 6.27831C23.9573 6.90353 24.6244 8.05897 24.6244 9.3094V18.6906C24.6244 19.941 23.9573 21.0965 22.8744 21.7217L14.75 26.4123C13.6671 27.0375 12.3329 27.0375 11.25 26.4123L3.12564 21.7217C2.04274 21.0965 1.37564 19.941 1.37564 18.6906V9.3094C1.37564 8.05897 2.04274 6.90353 3.12564 6.27831L11.25 1.58771Z'
            />
          </svg>

          <p
            className='text-sm z-[2]'
            style={{ color: isCurrent ? 'white' : color }}
          >
            {getInitials(name)}
          </p>
        </div>
      </Tooltip>
    );
  },
);

const ClippedImage = ({
  name,
  color,
  url,
}: {
  url: string;
  name: string;
  color: string;
}) => {
  return (
    <Tooltip hasArrow label={name}>
      <div
        className='flex w-[26px] h-[28px] items-center justify-center'
        style={{
          background: color,
          clipPath: `polygon(
      45.686% 6.011%, 45.686% 6.011%, 47.034% 5.372%, 48.431% 4.875%,
      49.865% 4.52%, 51.323% 4.307%, 52.793% 4.236%, 54.264% 4.307%,
      55.722% 4.52%, 57.155% 4.875%, 58.552% 5.372%, 59.9% 6.011%,
      92.893% 23.77%, 92.893% 23.77%, 94.161% 24.539%, 95.321% 25.418%,
      96.368% 26.398%, 97.295% 27.469%, 98.096% 28.621%, 98.765% 29.843%,
      99.296% 31.127%, 99.683% 32.462%, 99.92% 33.839%, 100% 35.246%,
      100% 70.765%, 100% 70.765%, 99.92% 72.173%, 99.683% 73.549%,
      99.296% 74.884%, 98.765% 76.168%, 98.096% 77.39%, 97.295% 78.542%,
      96.368% 79.613%, 95.321% 80.593%, 94.161% 81.472%, 92.893% 82.241%,
      59.9% 100%, 59.9% 100%, 58.552% 100.639%, 57.155% 101.136%,
      55.722% 101.491%, 54.264% 101.704%, 52.793% 101.775%, 51.323% 101.704%,
      49.865% 101.491%, 48.431% 101.136%, 47.034% 100.639%, 45.686% 100%,
      12.693% 82.241%, 12.693% 82.241%, 11.426% 81.472%, 10.265% 80.593%,
      9.219% 79.613%, 8.292% 78.542%, 7.491% 77.39%, 6.822% 76.168%,
      6.29% 74.884%, 5.903% 73.549%, 5.667% 72.173%, 5.586% 70.765%,
      5.586% 35.246%, 5.586% 35.246%, 5.667% 33.839%, 5.903% 32.462%,
      6.29% 31.127%, 6.822% 29.843%, 7.491% 28.621%, 8.292% 27.469%,
      9.219% 26.398%, 10.265% 25.418%, 11.426% 24.539%, 12.693% 23.77%,
      45.686% 6.011%
    )`,
        }}
      >
        <div
          role='img'
          aria-label={name}
          className={`w-[24px] h-[26px] bg-cover bg-center -mr-[0.5px]`}
          style={{
            backgroundImage: `url(${url})`,
            backgroundSize: 'contain',
            clipPath: `polygon(
      45.686% 6.011%, 45.686% 6.011%, 47.034% 5.372%, 48.431% 4.875%,
      49.865% 4.52%, 51.323% 4.307%, 52.793% 4.236%, 54.264% 4.307%,
      55.722% 4.52%, 57.155% 4.875%, 58.552% 5.372%, 59.9% 6.011%,
      92.893% 23.77%, 92.893% 23.77%, 94.161% 24.539%, 95.321% 25.418%,
      96.368% 26.398%, 97.295% 27.469%, 98.096% 28.621%, 98.765% 29.843%,
      99.296% 31.127%, 99.683% 32.462%, 99.92% 33.839%, 100% 35.246%,
      100% 70.765%, 100% 70.765%, 99.92% 72.173%, 99.683% 73.549%,
      99.296% 74.884%, 98.765% 76.168%, 98.096% 77.39%, 97.295% 78.542%,
      96.368% 79.613%, 95.321% 80.593%, 94.161% 81.472%, 92.893% 82.241%,
      59.9% 100%, 59.9% 100%, 58.552% 100.639%, 57.155% 101.136%,
      55.722% 101.491%, 54.264% 101.704%, 52.793% 101.775%, 51.323% 101.704%,
      49.865% 101.491%, 48.431% 101.136%, 47.034% 100.639%, 45.686% 100%,
      12.693% 82.241%, 12.693% 82.241%, 11.426% 81.472%, 10.265% 80.593%,
      9.219% 79.613%, 8.292% 78.542%, 7.491% 77.39%, 6.822% 76.168%,
      6.29% 74.884%, 5.903% 73.549%, 5.667% 72.173%, 5.586% 70.765%,
      5.586% 35.246%, 5.586% 35.246%, 5.667% 33.839%, 5.903% 32.462%,
      6.29% 31.127%, 6.822% 29.843%, 7.491% 28.621%, 8.292% 27.469%,
      9.219% 26.398%, 10.265% 25.418%, 11.426% 24.539%, 12.693% 23.77%,
      45.686% 6.011%
    )`,
          }}
        />
      </div>
    </Tooltip>
  );
};

function getInitials(name: string) {
  const temp = name.toUpperCase().split(' ').splice(0, 2);

  return temp
    .map((s) => s[0])
    .join('')
    .trim();
}
